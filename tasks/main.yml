---
# Copyright (C) 2020-2021 Stefan Hornburg (Racke) <racke@linuxia.de>
# SPDX-License-Identifier: GPL-2.0-or-later

- name: Include variables depending on OS details
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "defaults.yml"
      paths: osvars
  tags:
    - always

- name: Check for valid installation method
  assert:
    that:
      sympa_installation_method in ['none', 'package', 'repository', 'source', 'sync']
  tags: sympa

- name: Check for mandatory parameter
  assert:
    that:
       sympa_sync_directory is defined
  when: sympa_installation_method == 'sync'
  tags:
    - sympa

- name: Install prerequisites for compiling Sympa
  import_tasks: compile-prereqs.yml
  when: sympa_installation_method != 'package'
  tags:
    - sympa

- name: Install database driver for Perl (PostgreSQL)
  package:
    name: "{{ sympa_database_driver_postgresql }}"
  when:
    - sympa_installation_method != 'package'
    - sympa_database.type in ['PostgreSQL', 'Pg']
  tags:
    - sympa
    - sympa-database-driver

- name: Install database driver for Perl (MySQL / MariaDB)
  package:
    name: "{{ sympa_database_driver_mysql }}"
  when:
    - sympa_installation_method != 'package'
    - sympa_database.type in ['MySQL', 'mysql']
  tags:
    - sympa
    - sympa-database-driver

- name: Install database driver for Perl (SQLite3)
  package:
    name: "{{ sympa_database_driver_sqlite }}"
  when:
    - sympa_installation_method != 'package'
    - sympa_database.type == 'SQLite'
  tags:
    - sympa
    - sympa-database-driver

- name: Install database driver for ODBC
  package:
    name: "{{ sympa_database_driver_odbc }}"
  when: sympa_install_odbc_driver
  tags:
    - sympa
    - sympa-database-driver

- name: Run tasks specific for installation method
  include_tasks:
    file: "{{ sympa_installation_method }}.yml"
  when: sympa_installation_method != 'none'
  tags:
    - sympa

- name: Configure, make and install Sympa
  import_tasks: config-make-install.yml
  when: sympa_installation_method not in ['none', 'package']
  notify: restart sympa

- name: Enable syslog
  import_tasks: syslog.yml
  when:
    - sympa_installation_method != 'package'
    - ansible_os_family not in ['Alpine', 'Archlinux', 'FreeBSD']

- name: Create directory for file with list aliases
  file:
    state: directory
    path: "{{ sympa_config_sendmail_aliases.split('/')[:-1] | join('/') }}"
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0755

- name: Create file for list aliases
  file:
    state: touch
    path: "{{ sympa_config_sendmail_aliases }}"
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"

- name: Create Sympa configuration directory
  file:
    state: directory
    path: /etc/sympa
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0755

- name: Create configuration file sympa.conf
  template:
    src: sympa.conf.j2
    dest: /etc/sympa/sympa.conf
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0640
  when: sympa_installation_method != 'package' or ansible_os_family == 'RedHat'
  notify:
    - restart sympa
    - restart wwsympa
    - restart sympasoap
  tags:
    - sympa
    - sympa-conf

- name: Create configuration files for robots on request
  import_tasks: robots.yml
  when: sympa_robots | default([]) | count > 0
  tags:
    - sympa
    - sympa-conf
    - sympa-robots

- name: Create configuration file auth.conf
  template:
    src: auth.conf.j2
    dest: /etc/sympa/auth.conf
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0640
  notify:
    - restart sympa
    - restart wwsympa
    - restart sympasoap
  tags:
    - sympa
    - sympa-conf
    - sympa-auth

- name: Create configuration file edit_list.conf
  template:
    src: edit_list.conf.j2
    dest: /etc/sympa/edit_list.conf
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0644
  notify:
    - restart sympa
    - restart wwsympa
    - restart sympasoap
  tags:
    - sympa
    - sympa-conf
    - sympa-edit-list

- name: Create configuration file topics.conf
  template:
    src: topics.conf.j2
    dest: /etc/sympa/topics.conf
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0640
  when:
    - sympa_topics is defined
    - sympa_topics | count
  notify:
    - restart sympa
    - restart wwsympa
    - restart sympasoap
  tags:
    - sympa
    - sympa-conf

- name: Email templates
  import_tasks: email-templates.yml
  when: sympa_email_templates | count > 0
  tags:
    - sympa
    - sympa-email-templates

- name: Web templates
  import_tasks: web-templates.yml
  when: sympa_web_templates | count > 0
  tags:
    - sympa
    - sympa-web-templates

- name: Custom scenari
  import_tasks: scenari.yml
  tags:
    - sympa
    - sympa-scenari

- name: Create configuration file create_list.conf
  template:
    src: create_list.conf.j2
    dest: /etc/sympa/create_list.conf
    owner: "{{ sympa_unix_user }}"
    group: "{{ sympa_unix_group }}"
    mode: 0640
  when: sympa_web_fcgi_enabled
  notify:
    - restart wwsympa
  tags:
    - sympa
    - sympa-conf

- name: Add custom list templates
  import_tasks: create-list-templates.yml
  tags:
    - sympa
    - sympa-list-templates

- name: Run upgrade command
  command: "{{ sympa_command }} --upgrade"
  become_user: "{{ sympa_unix_user }}"
  vars:
    ansible_ssh_pipelining: true
  when:
    - sympa_installation_method not in ['none', 'package']
  tags:
    - sympa

- name: Add unit files for sympa services
  template:
    src: "{{ item }}.service.j2"
    dest: "/etc/systemd/system/{{ item }}.service"
    owner: root
    group: root
    mode: 0755
  with_items: "{{ sympa_services }}"
  when:
    - sympa_installation_method != 'package'
    - ansible_service_mgr == "systemd"
  register: sympa_service_unit
  notify: "restart {{ item }}"
  tags:
    - sympa
    - sympa-units

- name: Reload systemd if necessary
  systemd:
    daemon_reload: true
  with_items: "{{ sympa_services }}"
  when:
    - ansible_service_mgr == "systemd"
    - sympa_service_unit.changed
  tags:
    - sympa

- name: Ensure that Sympa is enabled and started
  service:
    name: sympa
    enabled: true
    state: started
  tags:
    - sympa

- name: Manage lists
  import_tasks: manage-lists.yml
  when: sympa_lists | count > 0

- name: WWSympa
  import_tasks: wwsympa.yml
  when:
    - sympa_installation_method != 'package'
    - sympa_web_fcgi_enabled
  tags:
    - sympa-units
    - wwsympa

- name: SOAP
  import_tasks: soap.yml
  when:
    - sympa_installation_method != 'package'
    - sympa_soap_fcgi_enabled
  tags:
    - sympa-units
    - sympasoap
